
function setup(options) result(result)
	USE cosmosis_modules
	USE interface_tools_NC
	implicit none
	integer(cosmosis_block), value :: options
	integer(cosmosis_status) :: status
	type(ini_settings), pointer :: settings
	type(c_ptr) :: result
	allocate(settings)
	settings%feedback = 0
	settings%Delta_mean = 0.d0
	settings%Delta_crit = 0.d0

	status = 0
	status = status + datablock_get_int_default(options, option_section, "feedback", 0, settings%feedback)
	status = status + datablock_get_double_default(options, option_section, "Delta_mean", 0.d0, settings%Delta_mean)
	status = status + datablock_get_double_default(options, option_section, "Delta_crit", 0.d0, settings%Delta_crit)
	status = status + datablock_get_int_default(options, option_section, "num_redshift_bin", 1, settings%num_redshift_bin)
	status = status + datablock_get_int_default(options, option_section, "num_mass_bin", 1, settings%num_lambda_bin)
	status = status + datablock_get_double_default(options, option_section, "minimum_redshift", 0.d0, settings%minimum_redshift)
	status = status + datablock_get_double_default(options, option_section, "maximum_redshift", 1.d0, settings%maximum_redshift)
	status = status + datablock_get_double_default(options, option_section, "minimum_log10mass", 13.d0, settings%minimum_lambda)
	status = status + datablock_get_double_default(options, option_section, "maximum_log10mass", 15.d0, settings%maximum_lambda)
	status = status + datablock_get_logical_default(options, option_section, "use_mass_file", .false., settings%use_WL_mass)
	if (settings%use_WL_mass) status = status + datablock_get_string(options, option_section, "mass_file", settings%file_data_WL)
	if (status .ne. 0) then 
		write(*,*) "Failed setup of HMF!", status
		stop
	endif
	result = c_loc(settings)
	if (settings%Delta_mean > 1.d-3 .and. settings%Delta_crit > 1.d-3 .or. settings%Delta_mean < 1.d-3 .and. settings%Delta_crit < 1.d-3) then
		write(*,*) "Warning: both Delta_mean and Delta_crit larger or equal to zero;"
		write(*,*) "Define just one according to your mass definition"
		stop
	end if
end function setup

function execute(block, config) result(status)

	use interface_tools_NC
	use cosmosis_modules
	USE hmf_tinker
	USE read_data

	implicit none
	integer(cosmosis_block), value :: block
	integer(cosmosis_status) :: status
	type(c_ptr), value :: config
	type(ini_settings), pointer :: settings
	type(pk_settings) :: PK

	integer nz,nL,nz2,nL2,index_i,index_j


	status = 0
	call c_f_pointer(config, settings)

	! Get Cosmological Parameter Values
	status = status + datablock_get_double(block, cosmological_parameters_section, "OMEGA_M", Omega_m)
	status = status + datablock_get_double(block, cosmological_parameters_section, "OMEGA_LAMBDA", Omega_v)
	status = status + datablock_get_double_default(block,cosmological_parameters_section, "OMEGA_NU", 0.0D0, Omega_nu)
	status = status + datablock_get_double_default(block, cosmological_parameters_section, "OMEGA_K", 0.0D0, Omega_k)
	status = status + datablock_get_double_default(block, cosmological_parameters_section, "W", -1.0D0, w_0)
	status = status + datablock_get_double_default(block, cosmological_parameters_section, "WA", 0.0D0, w_a)


	Omega_dm = Omega_m - Omega_nu ! Omega_dm = Omega_cdm + Omega_baryon


	!load in the matter power spectrum
	status = load_matter_power(block,PK)
	if (status .ne. 0) then
		write(*,*) "Could not load matter power"
		status=3
		return 
	endif
    ! ALLOCATE POWER SPECTRUM QUANTITIES ======================
    call allocate_pow_spec(PK)

	if (settings%maximum_redshift>PK%redshifts(PK%num_z)) then
	    write(*,*) "WARNING out of redshift range computed by CAMB; increse z_max" 
	    return
	end if

	! SET THE NUMBER OF MASS AND REDSHIFT BIN TO COMPUTE
	NC%num_of_L_bin= settings%num_lambda_bin
	NC%num_of_z_bin= settings%num_redshift_bin
	NC%red_min=settings%minimum_redshift
	NC%red_max=settings%maximum_redshift
	NC%lambda_min=settings%minimum_lambda
	NC%lambda_max=settings%maximum_lambda
	NC%delta_red_bin=(NC%red_max-NC%red_min)/NC%num_of_z_bin
	NC%delta_lambda_bin=(NC%lambda_max-NC%lambda_min)/NC%num_of_L_bin
	call allocate_NC(NC,settings)
	! ALLOCATE ARRAYS OF THE EXTRAMA FOR INTEGRATION ==========
    do nz=1,NC%num_of_z_bin ! Start loop over redshift bin
        NC%z_min_array(nz) = NC%red_min + NC%delta_red_bin*(nz-1) ! values set just for test
        NC%z_max_array(nz) = NC%red_min + NC%delta_red_bin*(nz) ! values set just for test
    end do
    do nL=1,NC%num_of_L_bin ! Start loop over Lambda bin 
        NC%LnLambda_min_array(nL)=(NC%lambda_min+(nL-1)*NC%delta_lambda_bin) ! values set just for test
        NC%LnLambda_max_array(nL)=(NC%lambda_min+(nL)*NC%delta_lambda_bin) ! values set just for test
    end do
    ! =========================================================
    ! =========================================================
	Delta_c=settings%Delta_crit ! Set Delta_crit > 0 in the .ini file for halo masses defined wrt the critical density
	Delta_m=settings%Delta_mean ! Set Delta_mean > 0 in the .ini file for halo masses defined wrt the mean background density

	
	
	
	
	if (settings%use_WL_mass) call read_one_col(settings%file_data_WL) ! read the data, if you want use mass values read from a file

	! Read the Fitting Parameters for the Tinker HMF ========
	call init_tinker_param

	! If Delta_m is defined get fitting parameters for Tinker hmf for Delta_m
	! otherwise the fitting parameters are computed each time n(M,z) is called
	! for a different redshift for Delta_m=Delta_c/Omega_m(z)
    if (Delta_m .gt. 1.d-3) call Get_fit_param(NC%z_min_array(nz))

	do nz=1,NC%num_of_z_bin ! Start loop over redshift bin
	    if (Delta_c .gt. 1.d-3) call Get_fit_param(NC%z_min_array(nz))
	    do nL=1,NC%num_of_L_bin ! Start loop over Mass bin
            NC%n_Li_zj(nL,nz)=dndM_test(NC%LnLambda_min_array(nL),NC%z_min_array(nz))
	    end do
	end do
	
	status = datablock_put_double_array_1d(block, mass_function_section,"z",NC%z_min_array(nz))
    status = datablock_put_double_array_1d(block, mass_function_section,"mass",NC%LnLambda_min_array)
    status = datablock_put_double_array_2d(block, mass_function_section,"dndM", dm)


	if(settings%feedback >0) then
	    write(*,*) 'DONE: '
	end if


	call deallocate_matterpower(PK)
	call deallocate_NC(NC)
end function execute


function cleanup(config) result(status)
	use interface_tools_NC
	use cosmosis_modules
	type(c_ptr), value :: config
	type(ini_settings), pointer :: settings
	integer(cosmosis_status) :: status

	!Free memory allocated in the setup function
	call c_f_pointer(config, settings)
	deallocate(settings)

	status = 0

end function cleanup
